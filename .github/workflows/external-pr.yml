name: External PR Tests (Requires Approval)

# This workflow runs tests for external contributor PRs
# It uses pull_request_target to access secrets but requires manual approval for security
permissions:
  contents: read
  packages: read
  pull-requests: write
  checks: write
  statuses: write

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.github/workflows/docs.yml'
  issue_comment:
    types: [created]

concurrency:
  group: external-pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Handle comment-based approval
  comment-approval:
    name: Comment-based Approval
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    outputs:
      approved: ${{ steps.check-approval.outputs.approved }}
      pr-number: ${{ steps.check-approval.outputs.pr-number }}
    steps:
      - name: Check if comment approves PR for testing
        id: check-approval
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.toLowerCase().trim();
            const author = context.payload.comment.user.login;
            const prNumber = context.payload.issue.number;
            
            console.log(`Comment: "${comment}"`);
            console.log(`Author: ${author}`);
            console.log(`PR Number: ${prNumber}`);
            
            // Check if comment contains approval keywords
            const approvalKeywords = [
              '/approve',
              '/approve-testing',
              'approved for testing',
              'approve for testing',
              '/test-approved'
            ];
            
            const isApprovalComment = approvalKeywords.some(keyword => 
              comment.includes(keyword)
            );
            
            if (!isApprovalComment) {
              console.log('Comment does not contain approval keywords');
              core.setOutput('approved', 'false');
              core.setOutput('pr-number', prNumber);
              return;
            }
            
            console.log('Comment contains approval keywords, checking permissions...');
            
            // Check if user has permission to approve (write access or above)
            try {
              const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: author
              });
              
              const permission = collaborator.permission;
              const canApprove = ['admin', 'maintain', 'write'].includes(permission);
              
              console.log(`User ${author} has ${permission} permission. Can approve: ${canApprove}`);
              
              if (canApprove) {
                // Get PR details to check if it's external
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                const isExternal = pr.head.repo.full_name !== context.repo.owner + '/' + context.repo.repo;
                console.log(`PR is external: ${isExternal}`);
                
                if (isExternal) {
                  core.setOutput('approved', 'true');
                  core.setOutput('pr-number', prNumber);
                  
                  // Add approval label
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    labels: ['approved-for-testing']
                  });
                  
                  // Add confirmation comment
                  const confirmationComment = '## ‚úÖ Approved via Comment\n\n' +
                    'Approved by: @' + author + '\n' +
                    'Approved on: ' + new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC\n' +
                    'Trigger comment: "' + context.payload.comment.body.trim() + '"\n\n' +
                    'This external PR has been approved for testing with secrets. The full test suite will run automatically.\n\n' +
                    'Tests that will now run:\n' +
                    '- Integration tests with real NetBird API\n' +
                    '- Docker Compose tests\n' +
                    '- Helm chart tests with real secrets\n\n' +
                    'Future commits to this PR will automatically run the full test suite without requiring re-approval.';
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: confirmationComment
                  });
                  
                  console.log('PR approved and label added');
                } else {
                  core.setOutput('approved', 'false');
                  core.setOutput('pr-number', prNumber);
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `@${author} This is not an external PR (same repository), so approval is not needed. Tests run automatically for internal PRs.`
                  });
                }
              } else {
                core.setOutput('approved', 'false');
                core.setOutput('pr-number', prNumber);
                
                const permissionDeniedMessage = '@' + author + ' ‚ùå **Permission Denied**\n\n' +
                  'You don\'t have permission to approve external PRs for testing.\n\n' +
                  '**Who can approve:**\n' +
                  '- Repository maintainers with **write**, **maintain**, or **admin** access\n' +
                  '- Organization members with appropriate permissions\n\n' +
                  '**Your current permission level:** `' + permission + '`\n\n' +
                  'If you believe this is an error, please contact a repository maintainer.';
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: permissionDeniedMessage
                });
              }
            } catch (error) {
              console.log(`Error checking permissions: ${error.message}`);
              core.setOutput('approved', 'false');
              core.setOutput('pr-number', prNumber);
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `@${author} Error checking permissions. Please try again or contact a maintainer.`
              });
            }

  # Security check - only run if approved or from trusted user
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: [comment-approval]
    if: always() && (github.event_name == 'pull_request_target' || needs.comment-approval.outputs.approved == 'true')
    outputs:
      should-run: ${{ steps.check.outputs.approved }}
      is-external: ${{ steps.check.outputs.external }}
      pr-number: ${{ steps.check.outputs.pr-number }}
    steps:
      - name: Check if PR should run tests
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber, headRepoFullName, labels;
            
            // Handle different event types
            if (context.eventName === 'pull_request_target') {
              prNumber = context.payload.pull_request.number;
              headRepoFullName = context.payload.pull_request.head.repo.full_name;
              labels = context.payload.pull_request.labels.map(label => label.name);
              console.log('Triggered by pull_request_target event');
            } else if (context.eventName === 'issue_comment') {
              prNumber = ${{ needs.comment-approval.outputs.pr-number }};
              
              // Get PR details from API
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              headRepoFullName = pr.head.repo.full_name;
              labels = pr.labels.map(label => label.name);
              console.log('Triggered by comment approval');
            }
            
            const currentRepo = `${context.repo.owner}/${context.repo.repo}`;
            const isExternal = headRepoFullName !== currentRepo;
            
            console.log(`PR Number: ${prNumber}`);
            console.log(`Head Repo: ${headRepoFullName}`);
            console.log(`Current Repo: ${currentRepo}`);
            console.log(`Is External: ${isExternal}`);
            console.log(`Labels: ${labels.join(', ')}`);
            
            core.setOutput('pr-number', prNumber);
            
            if (isExternal) {
              core.setOutput('external', 'true');
              console.log(`üîç External PR detected from: ${headRepoFullName}`);
              
              // Check if PR has approval label
              const hasApprovalLabel = labels.includes('approved-for-testing');
              
              if (hasApprovalLabel) {
                core.setOutput('approved', 'true');
                console.log('‚úÖ PR approved for testing (has "approved-for-testing" label)');
              } else {
                core.setOutput('approved', 'false');
                console.log('‚ö†Ô∏è External PR requires manual approval');
                console.log('Maintainer: Add "approved-for-testing" label or comment "/approve" to run tests with secrets');
              }
            } else {
              core.setOutput('external', 'false');
              core.setOutput('approved', 'true');
              console.log('‚úÖ Internal PR - automatically approved');
            }

      - name: Comment on PR if approval needed
        if: steps.check.outputs.external == 'true' && steps.check.outputs.approved == 'false' && github.event_name == 'pull_request_target'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = '## üõ°Ô∏è External PR Security Check - Approval Required\n\n' +
              '> **This PR is from an external contributor and requires maintainer approval to run tests with secrets.**\n\n' +
              '### üë• For Maintainers - Action Required\n\n' +
              '**üîç Before approving:**\n' +
              '1. Review all code changes carefully\n' +
              '2. Check that no malicious code is present\n' +
              '3. Verify no secrets would be exposed\n' +
              '4. Confirm the contributor is trustworthy\n\n' +
              '**‚úÖ To approve (choose one method):**\n\n' +
              '**üéØ Quick approval via comment (recommended):**\n' +
              '```\n' +
              '/approve\n' +
              '```\n\n' +
              '**üìù Alternative comment formats:**\n' +
              '- `/approve-testing`\n' +
              '- `approved for testing`\n' +
              '- `approve for testing`\n\n' +
              '**üè∑Ô∏è Manual approval:**\n' +
              '- Add the `approved-for-testing` label\n\n' +
              '---\n\n' +
              '### üß™ Test Status\n\n' +
              '**‚úÖ Running without approval:**\n' +
              '- Unit tests (no secrets)\n' +
              '- Linting and code quality\n' +
              '- Docker build validation\n' +
              '- Performance benchmarks\n\n' +
              '**üîí Awaiting approval:**\n' +
              '- Integration tests (requires NETBIRD_API_TOKEN)\n' +
              '- Docker Compose tests (requires NETBIRD_API_TOKEN)\n' +
              '- Helm chart tests with real API\n\n' +
              '**üîê Security Note:** Only maintainers with write access can approve. This protects repository secrets from malicious code.';
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.check.outputs.pr-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Run basic tests that don't require secrets
  basic-tests:
    name: Basic Tests (No Secrets)
    runs-on: ubuntu-latest
    needs: security-check
    if: needs.security-check.outputs.is-external == 'true'
    steps:
      - name: Get PR details for checkout
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.security-check.outputs.pr-number }};
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            core.setOutput('ref', pr.head.sha);
            core.setOutput('repo', pr.head.repo.full_name);

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-details.outputs.ref }}
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download dependencies
        run: go mod download

      - name: Run linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Run unit tests
        run: |
          chmod +x scripts/run-tests.sh
          ./scripts/run-tests.sh unit

      - name: Run performance tests
        run: |
          ./scripts/run-tests.sh performance

      - name: Run benchmark tests
        run: |
          ./scripts/run-tests.sh benchmark

      - name: Build Docker image
        run: |
          docker build -t netbird-api-exporter:pr-${{ needs.security-check.outputs.pr-number }} .

      - name: Test Docker image basic functionality
        run: |
          # Test help command
          docker run --rm netbird-api-exporter:pr-${{ needs.security-check.outputs.pr-number }} --help
          
          # Test with dummy config (should fail gracefully)
          docker run --rm \
            -e NETBIRD_API_URL=https://api.example.com \
            -e LOG_LEVEL=debug \
            netbird-api-exporter:pr-${{ needs.security-check.outputs.pr-number }} &
          
          sleep 5
          pkill -f "docker run" || true
          echo "‚úÖ Docker image basic functionality test passed"

      - name: Validate Helm chart
        run: |
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Lint chart
          helm lint charts/netbird-api-exporter --strict
          
          # Test template generation with dummy values
          helm template netbird-api-exporter charts/netbird-api-exporter \
            --set netbird.apiToken="dummy-token" \
            --set netbird.apiUrl="https://api.example.com" \
            --dry-run > /dev/null

  # Run full tests with secrets (only if approved)
  full-tests:
    name: Full Test Suite (With Secrets)
    runs-on: ubuntu-latest
    needs: [security-check, basic-tests]
    if: needs.security-check.outputs.should-run == 'true'
    environment: 
      name: external-pr-testing
      url: https://github.com/${{ github.repository }}/pull/${{ needs.security-check.outputs.pr-number }}
    steps:
      - name: Get PR details for checkout
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ needs.security-check.outputs.pr-number }};
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            core.setOutput('ref', pr.head.sha);

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-details.outputs.ref }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Download dependencies
        run: go mod download

      - name: Run integration tests
        env:
          NETBIRD_API_TOKEN: ${{ secrets.NETBIRD_API_TOKEN }}
        run: |
          chmod +x scripts/run-tests.sh
          ./scripts/run-tests.sh integration

      - name: Test Docker Compose
        env:
          NETBIRD_API_TOKEN: ${{ secrets.NETBIRD_API_TOKEN }}
        run: |
          docker compose up -d
          sleep 15
          
          # Test metrics endpoint
          curl -sSf http://localhost:8080/metrics
          
          docker compose down

      - name: Test Helm Chart with Real Token
        env:
          NETBIRD_API_TOKEN: ${{ secrets.NETBIRD_API_TOKEN }}
        run: |
          # Install kubectl and kind
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
          # Create kind cluster
          kind create cluster --name external-pr-test
          
          # Build and load image
          docker build -t netbird-api-exporter:test .
          kind load docker-image netbird-api-exporter:test --name external-pr-test
          
          # Deploy with real token
          helm install netbird-test charts/netbird-api-exporter \
            --set image.repository=netbird-api-exporter \
            --set image.tag=test \
            --set image.pullPolicy=Never \
            --set netbird.apiToken="$NETBIRD_API_TOKEN" \
            --wait --timeout=300s
          
          # Test deployment
          kubectl wait --for=condition=available --timeout=300s deployment/netbird-test-netbird-api-exporter
          kubectl port-forward deployment/netbird-test-netbird-api-exporter 8080:8080 &
          sleep 10
          curl -s http://localhost:8080/metrics
          
          # Cleanup
          kind delete cluster --name external-pr-test

  # Report results
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [comment-approval, security-check, basic-tests, full-tests]
    if: always() && needs.security-check.result != 'skipped'
    steps:
      - name: Generate summary
        uses: actions/github-script@v7
        with:
          script: |
            const securityCheck = '${{ needs.security-check.outputs.should-run }}' === 'true';
            const isExternal = '${{ needs.security-check.outputs.is-external }}' === 'true';
            const basicTests = '${{ needs.basic-tests.result }}';
            const fullTests = '${{ needs.full-tests.result }}';
            const prNumber = ${{ needs.security-check.outputs.pr-number }};
            const wasCommentApproved = '${{ needs.comment-approval.outputs.approved }}' === 'true';
            
            let summary = '## üß™ External PR Test Results\n\n';
            
            if (wasCommentApproved) {
              summary += '### ‚úÖ Approved via Comment\n';
              summary += 'This PR was approved for testing via comment. Full test suite is running.\n\n';
            } else if (isExternal && !securityCheck) {
              summary += '### ‚ö†Ô∏è Approval Required\n';
              summary += 'This external PR requires approval to run tests with secrets.\n\n';
            }
            
            summary += '| Test Category | Status | Details |\n';
            summary += '|---------------|--------|----------|\n';
            
            if (isExternal) {
              summary += `| Basic Tests | ${basicTests === 'success' ? '‚úÖ Passed' : basicTests === 'skipped' ? '‚è≠Ô∏è Skipped' : '‚ùå Failed'} | Unit tests, linting, Docker build |\n`;
            }
            
            if (securityCheck) {
              summary += `| Integration Tests | ${fullTests === 'success' ? '‚úÖ Passed' : fullTests === 'skipped' ? '‚è≠Ô∏è Skipped' : '‚ùå Failed'} | Tests with real NetBird API |\n`;
              summary += `| Docker Compose | ${fullTests === 'success' ? '‚úÖ Passed' : fullTests === 'skipped' ? '‚è≠Ô∏è Skipped' : '‚ùå Failed'} | Full stack testing |\n`;
              summary += `| Helm Chart | ${fullTests === 'success' ? '‚úÖ Passed' : fullTests === 'skipped' ? '‚è≠Ô∏è Skipped' : '‚ùå Failed'} | Kubernetes deployment testing |\n`;
            } else if (isExternal) {
              summary += '| Integration Tests | üîí Requires Approval | Add \'approved-for-testing\' label or comment \'/approve\' |\n';
              summary += '| Docker Compose | üîí Requires Approval | Add \'approved-for-testing\' label or comment \'/approve\' |\n';
              summary += '| Helm Chart | üîí Requires Approval | Add \'approved-for-testing\' label or comment \'/approve\' |\n';
            }
            
            if (isExternal && !securityCheck && !wasCommentApproved) {
              summary += '\n### üîê For Maintainers\n';
              summary += 'To run the full test suite with secrets:\n';
              summary += '**Option 1:** Add the `approved-for-testing` label\n';
              summary += '**Option 2:** Comment one of these approval commands:\n';
              summary += '- `/approve`\n';
              summary += '- `/approve-testing`\n';
              summary += '- `approved for testing`\n\n';
              summary += '**Security Note:** Only approve PRs from trusted contributors after thorough code review.';
            }
            
            // Add summary to job
            core.summary.addRaw(summary);
            await core.summary.write();
            
            // Comment on PR if this is the initial run (not comment-triggered)
            if (context.eventName === 'pull_request_target' && isExternal) {
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } 