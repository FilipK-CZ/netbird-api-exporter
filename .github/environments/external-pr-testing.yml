# GitHub Environment Configuration for External PR Testing
# This file documents the required environment setup for GitHub repository settings
# 
# To configure this environment in your GitHub repository:
# 1. Go to Settings > Environments
# 2. Create a new environment named "external-pr-testing"
# 3. Configure the following settings:

name: external-pr-testing
description: Environment for running privileged tests on approved external PRs

# Environment protection rules (configure these in GitHub UI):
protection_rules:
  # Require approval from maintainers before deployment
  required_reviewers:
    - type: users
      count: 1
      bypass_pull_request_allowances: false
  
  # Optional: Add a wait timer for additional security
  wait_timer: 0  # minutes (0 = no wait, consider 5-10 minutes for high security)
  
  # Prevent deployment to this environment on certain branches
  deployment_branch_policy:
    protected_branches: false
    custom_branch_policies: true
    allowed_branches:
      - main
      - develop

# Required secrets (configure these in GitHub UI):
required_secrets:
  - NETBIRD_API_TOKEN  # NetBird API token for integration tests

# Required variables (optional, configure in GitHub UI if needed):
variables:
  - name: NETBIRD_API_URL
    description: NetBird API URL for integration tests
    default: https://api.netbird.io

# Security considerations:
security_notes: |
  - This environment is used for running integration tests with real API tokens
  - Only maintainers with write access should be able to approve deployments
  - Consider enabling branch protection rules to prevent unauthorized deployments
  - Review all external PR code thoroughly before approving for this environment
  - Monitor API usage and set up alerts for unusual activity

# Instructions for repository maintainers:
setup_instructions: |
  1. Navigate to your repository settings
  2. Go to "Environments" section
  3. Click "New environment"
  4. Name it "external-pr-testing"
  5. Add the required secrets (NETBIRD_API_TOKEN)
  6. Configure protection rules:
     - Enable "Required reviewers" and add maintainers
     - Optionally enable "Wait timer" for additional security
     - Configure "Deployment branches" to only allow main/develop
  7. Save the environment configuration